"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"programming-concepts-ExPreStmt","metadata":{"permalink":"/blog/programming-concepts-ExPreStmt","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/programming-concepts-ExPredStmt.md","source":"@site/blog/programming-concepts-ExPredStmt.md","title":"Fundamental Concepts in Programming - Expressions, Predicates, and Statement","description":"In computer science language, \\"expression,\\" \\"predicate,\\" and \\"statement\\" are terms often used to describe different constructs in programming languages. Here\'s a brief explanation of each:","date":"2024-02-01T05:29:20.272Z","formattedDate":"February 1, 2024","tags":[{"label":"programming-concepts","permalink":"/blog/tags/programming-concepts"}],"readingTime":1.29,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"programming-concepts-ExPreStmt","title":"Fundamental Concepts in Programming - Expressions, Predicates, and Statement","tags":["programming-concepts"]},"unlisted":false,"nextItem":{"title":"JavaScript Algorithmic Mastery:Quick and Essential Syntax for Problem Solving","permalink":"/blog/JS-algorithmic-mastery"}},"content":"In computer science language, \\"expression,\\" \\"predicate,\\" and \\"statement\\" are terms often used to describe different constructs in programming languages. Here\'s a brief explanation of each:\\n\\n## Expression:\\n\\nAn expression is a combination of values, variables, operators, and function calls that can be evaluated to **produce a single value**.\\nExpressions can be simple, like a literal value or a variable, or complex, involving arithmetic or logical operations.\\nExamples: `5 + 3`, `x * y`, `isReady && hasPermission`,` Math.sqrt(16)`.\\n\\n## Predicate:\\n\\nA predicate is **a specific type of expression ** that **evaluates to either true or false** (also produce a single value).\\nPredicates are commonly used in conditional statements and loops to make decisions based on whether a condition is true or false.\\nExamples: x > 0 (evaluates to true or false based on whether x is greater than 0), isReady && hasPermission, name === \\"John\\".\\n\\n## Statement:\\n\\nA statement is a complete instruction that performs a specific action.\\nUnlike expressions, **statements don\'t necessarily produce a value**. They are executed for their side effects.\\nExamples: variable declarations (let x = 5;), control flow statements (if, else, for, while), function declarations (function myFunction() { /* code */ }).\\n\\n\\nan expression is a combination of values and operators that evaluates to a single value, a predicate is a specific type of expression that evaluates to true or false, and a statement is a complete instruction that performs an action. In many programming languages, expressions can be used as part of statements, and predicates are often used to control the flow of statements."},{"id":"/JS-algorithmic-mastery","metadata":{"permalink":"/blog/JS-algorithmic-mastery","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/JS-algorithmic-mastery.md","source":"@site/blog/JS-algorithmic-mastery.md","title":"JavaScript Algorithmic Mastery:Quick and Essential Syntax for Problem Solving","description":"Welcome to the world of algorithmic problem-solving with JavaScript! Whether you\'re a beginner or an experienced developer, mastering the fundamental syntax is crucial for tackling coding challenges effectively. In this guide, we\'ll explore key JavaScript syntax topics that are commonly used in algorithmic problem-solving.","date":"2024-01-25T02:33:07.744Z","formattedDate":"January 25, 2024","tags":[],"readingTime":2.79,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Fundamental Concepts in Programming - Expressions, Predicates, and Statement","permalink":"/blog/programming-concepts-ExPreStmt"},"nextItem":{"title":"ezbiz","permalink":"/blog/ezbiz"}},"content":"Welcome to the world of algorithmic problem-solving with JavaScript! Whether you\'re a beginner or an experienced developer, mastering the fundamental syntax is crucial for tackling coding challenges effectively. In this guide, we\'ll explore key JavaScript syntax topics that are commonly used in algorithmic problem-solving.\\n\\n## 1. Variables and Data Types\\n\\nUnderstanding how to declare variables using `let`, `const`, and `var`, and grasping the basics of data types like strings, numbers, and booleans lays a solid foundation for your coding journey.\\n\\n```javascript\\nlet age = 25;\\nconst name = \\"John\\";\\nvar isStudent = true;\\n```\\n\\n## 2. Arrays and Strings\\n\\nArrays and strings are essential data structures. Learn how to manipulate arrays using methods like `push()`, `pop()`, `shift()`, and work with string methods such as `charAt()`, `substring()`, and `indexOf()`.\\n\\n```javascript\\nlet numbers = [1, 2, 3, 4, 5];\\nnumbers.push(6);\\nlet greeting = \\"Hello, World!\\";\\nconsole.log(greeting.substring(0, 5));  // Output: Hello\\n```\\n\\n## 3. Control Flow\\n\\nMastering control flow constructs such as `if`, `else if`, and `else`, as well as loops like `for` and `while`, is crucial for making decisions and iterating through data.\\n\\n```javascript\\nlet score = 85;\\n\\nif (score >= 90) {\\n  console.log(\\"A\\");\\n} else if (score >= 80) {\\n  console.log(\\"B\\");\\n} else {\\n  console.log(\\"C\\");\\n}\\n```\\n\\n## 4. Functions\\n\\nFunctions are the building blocks of JavaScript. Learn to define functions using the `function` keyword, handle parameters, and use return statements effectively.\\n\\n```javascript\\nfunction add(a, b) {\\n  return a + b;\\n}\\n\\nlet result = add(3, 7);\\nconsole.log(result);  // Output: 10\\n```\\n\\n## 5. Objects\\n\\nObjects are powerful in JavaScript. Create and manipulate objects, access their properties, and use methods.\\n\\n```javascript\\nlet person = {\\n  name: \\"Alice\\",\\n  age: 30,\\n  greet: function() {\\n    console.log(\\"Hello, \\" + this.name + \\"!\\");\\n  }\\n};\\n\\nperson.greet();  // Output: Hello, Alice!\\n```\\n\\n(Continue with other topics...)\\n\\nThis guide provides a snapshot of essential JavaScript syntax for algorithmic problem-solving. Stay tuned for more in-depth explanations and examples in upcoming articles. Happy coding! \ud83d\ude80\\n\\n## More\\n\\n## Get the maximum of an array\\n  spread syntax:\\n  ```javascript\\n  const arr = [1, 2, 3];\\n  const max = Math.max(...arr);\\n\\n  ```\\n\\n## Get Last Element in an Array\\n  The slice() method returns specific elements from an array, as a new array object. This method selects the elements starting at the given start index and ends at the given end index excluding the element at the end index. The slice() method does not modify the existing array. Providing one index value returns the element at that position & a negative index value calculates the index from the end of the array.\\n\\n## Clear an array (empty Array)\\n  \\n1. By modifying the length property\\n    If the modified length is smaller than the original length, excess values will be removed. \\n    ```js\\n    const array = [1, 2, 3]\\n    array.length = 2\\n\\n    console.log(array)\\n    // [1, 2]\\n    ```\\n    Because the new length is smaller than the original, the excess value (3, in this case) is removed.\\n\\n    If the new length is larger than the original length, the array will be filled with undefined values to make up for the new length.\\n\\n    So set the length to 0, the array will be empty.\\n    ```js\\n    const array = [1, 2, 3]\\n    array.length = 0\\n\\n    console.log(array)\\n    // []\\n    ```\\n2. Or reassign a new value (an empty array) to a variable that initially has a non-empty array assigned to it."},{"id":"/ezbiz","metadata":{"permalink":"/blog/ezbiz","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/ezbiz.md","source":"@site/blog/ezbiz.md","title":"ezbiz","description":"Question & QuestionResponse","date":"2024-01-24T09:02:31.578Z","formattedDate":"January 24, 2024","tags":[],"readingTime":0.17,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"JavaScript Algorithmic Mastery:Quick and Essential Syntax for Problem Solving","permalink":"/blog/JS-algorithmic-mastery"},"nextItem":{"title":"Built-in React Hooks","permalink":"/blog/react-hooks"}},"content":"## Question & QuestionResponse\\nO2M\\nEach question has many questionResponses, and a questionResponse related to one question.\\n\\n## FormInstance & QuestionResponse\\n\\nO2M\\nEach formInstance has many questionResponses, and a questionResponse related to one formInstance."},{"id":"react-hooks","metadata":{"permalink":"/blog/react-hooks","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/react-hooks.md","source":"@site/blog/react-hooks.md","title":"Built-in React Hooks","description":"State Hooks","date":"2024-01-23T13:00:27.780Z","formattedDate":"January 23, 2024","tags":[{"label":"react","permalink":"/blog/tags/react"},{"label":"hook","permalink":"/blog/tags/hook"}],"readingTime":1.745,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"react-hooks","title":"Built-in React Hooks","tags":["react","hook"]},"unlisted":false,"prevItem":{"title":"ezbiz","permalink":"/blog/ezbiz"},"nextItem":{"title":"How to design customized rendering","permalink":"/blog/design-customized-rendering"}},"content":"\x3c!--Truncate--\x3e\\n## State Hooks\\n\\n- useState: declares a state variable tthat we can update directly.\\n- useReducer: declares a state variable with the update logic inside a reducer function.\\n\\n## Context Hooks\\nContext lets a component receive information from distant parents without passing it as props. \\n\\n- useContext: reads and subscribes to a content.\\n\\n## Ref Hooks\\nRefs let a component hold soe information that isn\'t used for rendering, like a DOM node or timeout ID. Refs are an \\"escape hatch\\" from the react paradigm. They are useful when you need to work with non-React systems, such as the built-in browser APIs.\\n\\n- useRef: declares a ref. We can hold any value in it, but most often it\'s used to hold a DOM node.\\n\\n## Effect Hooks\\nEffects let a component connect to and synchronize with external systems. This includes dealing with network, browser DOM, animationm widgets written using a different UI library, and other non-React code.\\n\\nEffects are an \u201cescape hatch\u201d from the React paradigm. Don\u2019t use Effects to orchestrate the data flow of your application. If you\u2019re not interacting with an external system, you might not need an Effect.\\n\\n- useEffect: connects a component to an external system.\\n- useLayoutEffect: fires before the browser repaints the screen. \\n- useInsertionEffect: fires before React makes changes to the DOM. Libraries can insert dynamic CSS here.\\n\\n## Performance Hooks\\nA common way to optimize re-renderinng performance is to skip uneccessary work.\\n\\n- useMemo: lets you cache the result of an expensive calculation.\\n- useCallback: lets you cache a function definition before passing it down to an optimized component.\\n- useTransition: lets you mark a state transition as non-blocking and allow other updates to interrupt it.\\n- useDeferredValue: lets you defer updating a non-critical part of the UI and let parts update first.\\n\\n## Resource Hooks\\nResources can be accessed by a component without having them as a part of their state.\\n- use: lets you read the value of a resource like a Promise or context.\\n\\n## Other Hooks\\nCommonly useful to library authors.\\n- useDefaultValue\\n- useId\\n- useSyncExternalStore"},{"id":"design-customized-rendering","metadata":{"permalink":"/blog/design-customized-rendering","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/design-customized-rendering.mdx","source":"@site/blog/design-customized-rendering.mdx","title":"How to design customized rendering","description":"Customized rendering refers to the ability to create and control the appearance and behavior of components in a way that goes beyond the default or standard rendering provided by a library or framework.","date":"2024-01-18T13:51:21.157Z","formattedDate":"January 18, 2024","tags":[],"readingTime":1.035,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"design-customized-rendering","title":"How to design customized rendering"},"unlisted":false,"prevItem":{"title":"Built-in React Hooks","permalink":"/blog/react-hooks"},"nextItem":{"title":"REST API vs GraphQL","permalink":"/blog/difference-between-graphql-and-rest"}},"content":"Customized rendering refers to the ability to create and control the appearance and behavior of components in a way that goes beyond the default or standard rendering provided by a library or framework.\\nCustomized rendering is a powerful concept that allows you to tailor your application to specific needs and design considerations.\\n\\n\x3c!-- truncate --\x3e\\n\\n## 1. Component Structure and Style\\n\\nWe can customize the structure and style of our components to align with your application\'s design. \\nThis involves writing custom HTML, CSS, or JSX to define how the component should look.\\n\\n## 2. Dynamic Content and Data Binding\\nCustomized rendering allow us to handle dynamic content data binding. \\nWe can create components that accept dynamic data as props and render it accordingly.\\nThis can involve conditional rendering, iterating over data arrays, or using other techniques to dynamically display content\\n\\n## 3. Event Handling\\nCustomize the how the components respond ti user interactions by handling events. \\nThis includes defining custom event handler and specifing how the component should behave when certain actions occur.\\n\\n## 4. Conditional Rendering\\nCustomize the rendering of components based on certain conditions. \\nE.g., show or hide specific elements, change styles, or render alternaive content based on the state or props of a component."},{"id":"difference-between-graphql-and-rest","metadata":{"permalink":"/blog/difference-between-graphql-and-rest","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/difference-between-graphql-and-rest.mdx","source":"@site/blog/difference-between-graphql-and-rest.mdx","title":"REST API vs GraphQL","description":"","date":"2024-01-18T08:53:36.559Z","formattedDate":"January 18, 2024","tags":[],"readingTime":0,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"difference-between-graphql-and-rest","title":"REST API vs GraphQL"},"unlisted":false,"prevItem":{"title":"How to design customized rendering","permalink":"/blog/design-customized-rendering"},"nextItem":{"title":"aws","permalink":"/blog/aws-service"}},"content":""},{"id":"aws-service","metadata":{"permalink":"/blog/aws-service","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/aws-service.md","source":"@site/blog/aws-service.md","title":"aws","description":"- Amazon S3 can be used to store and retrieve any type of data. By default all Amazon S3 resources are private. Only the resource owner can optionally grant access permissions to others by writting an access policy.","date":"2024-01-18T08:20:33.000Z","formattedDate":"January 18, 2024","tags":[{"label":"cloud","permalink":"/blog/tags/cloud"}],"readingTime":0.845,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"aws-service","title":"aws","tags":["cloud"]},"unlisted":false,"prevItem":{"title":"REST API vs GraphQL","permalink":"/blog/difference-between-graphql-and-rest"},"nextItem":{"title":"Relay - Mutation","permalink":"/blog/relay-mutation"}},"content":"- Amazon S3 can be used to store and retrieve any type of data. By default all Amazon S3 resources are private. Only the resource owner can optionally grant access permissions to others by writting an access policy.\\n\\n- Amazon EC2 uses public key cryptography to encrypt and decript login information. Public key cruptography uses a public key to encrypt a piece of data, and then the recipient uses their private key to decrypt the data. The public and private keys are known as a key pair.\\n\\nA virtual private cloud (VPC) is a virtusl network dedicated to an AWS account. While a VPC resides in an AWS Region, a subnet must reside within a single Availability Zone.\\n\\n- ### Change the Amazon EC2 instance type:\\nWe must stop your Amazon EBS-backed **instance** before we can change its instance type. Plan for downtime while our instance is stopped. Stopping the instance and changing its instance type might take a variable amount of time depending on our application\'s startup scripts."},{"id":"relay-mutation","metadata":{"permalink":"/blog/relay-mutation","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/mutation.mdx","source":"@site/blog/mutation.mdx","title":"Relay - Mutation","description":"general steps for creating a new object using Relay Mutations:","date":"2024-01-18T08:20:33.000Z","formattedDate":"January 18, 2024","tags":[{"label":"graphql","permalink":"/blog/tags/graphql"},{"label":"Relay","permalink":"/blog/tags/relay"}],"readingTime":1.985,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"relay-mutation","title":"Relay - Mutation","tags":["graphql","Relay"]},"unlisted":false,"prevItem":{"title":"aws","permalink":"/blog/aws-service"},"nextItem":{"title":"React Router","permalink":"/blog/react-router"}},"content":"general steps for creating a new object using Relay Mutations:\\n\\n \x3c!-- truncate --\x3e\\n\\n### 1. Define a GraphQL Mutation\\n   Create a GraphQL mutation that represents the action of creating a new object. This mutation should include input fields representing the data needed to create the object.\\n\\n```js\\n   // Example GraphQL mutation\\n\\nconst mutation = graphql`\\n    mutation ObjectMutation($input: CreateObjectInput!) {\\n    createObject(input: $input) {\\n    object {\\n      id\\n      name\\n      // other fields\\n    }\\n  }\\n}\\n` \\n```\\n\\n### 2. Create a Relay Mutation\\ncreare the commit method\\n```js\\nconst [commit] = useMutation<CreateObjectMutation>(mutation);\\n```\\nCreateObjectMutation: the type of mutation \\n\\nmutation: the definition of mutation \\n<br/>\\n### 3. invoke commit\\nthe new object to be create should be place in the \\"input\\" property of \\"variable\\". \\"variable\\" is a property of the big Object we commit.\\n\\n```js\\n<Button\\n        type=\\"primary\\"\\n        onClick={() =>\\n          commit({\\n            variables: { input: { createdBy: 1, name: title } },\\n            onCompleted: (response, errors) => {\\n              navigate(\\"/admin/forms\\");\\n            },\\n          })\\n        }\\n/>\\n```\\n\\n:::tip\\n\\nWhen developing a React app with Relay, you often use the babel-plugin-relay/macro package to enable the graphql template literal tag for your GraphQL queries. This allows you to embed GraphQL queries directly into your JavaScript or TypeScript files.\\n\\nIn Relay applications, when using the babel-plugin-relay/macro, you import the graphql template tag from the babel-plugin-relay/macro package instead of the generic graphql package. This is because the graphql template tag provided by babel-plugin-relay/macro is a special version tailored for Relay\'s use and is capable of performing ahead-of-time (AOT) compilation.\\n\\nWhen you use `import { graphql } from \\"babel-plugin-relay/macro\\";`, the Babel plugin processes the GraphQL queries at build time, generating optimized artifacts that are used by Relay to make more efficient GraphQL requests.\\n\\nBy using the babel-plugin-relay/macro, you get the benefits of AOT compilation, which includes:\\n\\nFaster Runtime: The Relay compiler processes the queries at build time, so the runtime environment doesn\'t need to perform complex parsing and transformations on GraphQL queries.\\n\\nSmaller Bundle Sizes: AOT compilation allows the Relay compiler to generate optimized artifacts, resulting in smaller bundle sizes for your application.\\n\\nStatic Validation: Queries are statically validated during the build process, catching errors early in development rather than at runtime.\\n\\nUsing the generic graphql package wouldn\'t provide these benefits, as it doesn\'t have the Relay-specific optimizations implemented by the babel-plugin-relay/macro. Therefore, when working with Relay, it\'s recommended to import graphql from babel-plugin-relay/macro for an improved development and runtime experience.\\n:::"},{"id":"react-router","metadata":{"permalink":"/blog/react-router","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/react-router.md","source":"@site/blog/react-router.md","title":"React Router","description":"","date":"2024-01-09T15:49:03.539Z","formattedDate":"January 9, 2024","tags":[{"label":"graphql","permalink":"/blog/tags/graphql"},{"label":"Relay","permalink":"/blog/tags/relay"}],"readingTime":0,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"react-router","title":"React Router","tags":["graphql","Relay"]},"unlisted":false,"prevItem":{"title":"Relay - Mutation","permalink":"/blog/relay-mutation"},"nextItem":{"title":"suspense/react-suspense","permalink":"/blog/suspense/react-suspense"}},"content":""},{"id":"/suspense/react-suspense","metadata":{"permalink":"/blog/suspense/react-suspense","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/suspense/react-suspense.md","source":"@site/blog/suspense/react-suspense.md","title":"suspense/react-suspense","description":"---","date":"2024-01-09T15:49:03.534Z","formattedDate":"January 9, 2024","tags":[],"readingTime":2.145,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"React Router","permalink":"/blog/react-router"},"nextItem":{"title":"applications-of-heap","permalink":"/blog/applications-of-heap"}},"content":"import Highlight from \'@site/src/components/Highlight\';\\nimport Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n---\\nslug: react-suspense\\ntitle:  react Suspense\\ntags: [React]\\n---\\n<Tabs>\\n    <TabItem value=\\"apple\\" label=\\"apple\\" default>\\n        hello apple\\n    </TabItem>\\n\\n    <TabItem value=\\"orange\\" label=\\"orange\\" default>\\n        hello orange\\n    </TabItem>\\n</Tabs>\\n\\n\\n# \\\\<Suspense\\\\>\\n \\n\\\\<Suspense\\\\> component is part of *React\'s* Concurrent Mode feature to improve the user experience by making it more respective and resilient.\\n\\n\\n\x3c!-- truncate --\x3e\\n\\n## Purpose\\nThe primary purpose of the \\\\<Suspense\\\\> component is to handle asynchronous operations, such as data fetching or lazy loading of components, in a more declarative way. It allows you to \\"suspend\\" rendering until some condition is met, typically until data is ready.\\n\\n\\n```js\\nimport React, { Suspense } from \'react\';\\n\\nconst MyComponent = React.lazy(() => import(\'./MyComponent\'));\\n\\nfunction App() {\\n  return (\\n    <Suspense fallback={<div>Loading...</div>}>\\n      <MyComponent />\\n    </Suspense>\\n  );\\n}\\n\\n```\\n:::tip\\nWhen you are using Relay\'s <Highlight style=\\"color: #277B9F\\">useLazyQuery</Highlight> , the official document recommend wrap it with a <Highlight style=\\"color: #277B9F\\">Suspense</Highlight> Component for better user experience.\\n:::\\n\\n## Common usage\\n### Displaying a fallback while content is loading\\n```js\\n<Suspense fallback={<Loading />}>\\n  <Albums />\\n</Suspense>\\n```\\nReact will display <Highlight color=\\"#E6F8FF\\">loading fallback</Highlight>\\nuntil all the code and data needed by the children has been loaded.\\n\\nOnly Suspense-enable data sources will activate the <Highlight color=\\" #E6F8FF\\">Suspense component</Highlight>. \\n1. Data fetching with Suspense-enabled frameworks like <Highlight color=\\"#277B9F\\">Relay</Highlight> and <Highlight color=\\"#277B9F\\">Next.js</Highlight>, such as <Highlight color=\\"#FDF2EA\\">useLazyQuery</Highlight> in <Highlight color=\\"#277B9F\\">Relay</Highlight> \\n2. Lazy-loading component code with <Highlight color=\\"#277B9F\\">lazy</Highlight> \\n3. Reading the value of a Promise with <Highlight color=\\"#277B9F\\">use</Highlight> \\n\\n### Revealing content together at once\\nBy default, the whole tree inside Suspense is treated as a single unit. Only all components inside the Suspense have been ready for rendering, all of those components will appear at once. Otherwise, even if only one of these components suspends waiting for some data, all of them together will be replaced by the loading indicator.\\n\\n![Image](./image.png)\\n\\n\\n### Revealing nested content as it loads\\nEach Suspense boundary\'s fallback will be filled in as the next level of content becomes available.\\n\\n![Image](./image-1.png)\\n\\nWith this change, displaying the <Highlight color=\\"#F6F7F9\\">Biography</Highlight> doesn\'t need to \\"wait\\" for the <Highlight color=\\"#F6F7F9\\">Albums</Highlight> to load.\\n\\n<Highlight color=\\"#F6F7F9\\">AlbumsGlimmer</Highlight>\\n\\nLet\'s break it down with proper sequence:\\n1. If <Highlight color=\\"#F6F7F9\\">Biography</Highlight> hasn\'t loaded yet, <Highlight color=\\"#F6F7F9\\">BigSpinner</Highlight> is shown in place of the entire content area.\\n2. Once the <Highlight color=\\"#F6F7F9\\">Biography</Highlight> finishes loadingm <Highlight color=\\"#F6F7F9\\">BigSpinner</Highlight> is replaced by the content.\\n3. If <Highlight color=\\"#F6F7F9\\">Albums</Highlight> hasn\'t loaded yet, <Highlight color=\\"#F6F7F9\\">AlbumsGlimmer</Highlight> id shown in place of <Highlight color=\\"#F6F7F9\\">Albums</Highlight> and its parent Panel.\\n4. Finally, once <Highlight color=\\"#F6F7F9\\">Albums</Highlight> finishes loading, it replaces <Highlight color=\\"#F6F7F9\\">AlbumsGlimmer</Highlight>.\\n\\n### More usage see at [react \\\\<Suspense>](https://react.dev/reference/react/Suspense)"},{"id":"/applications-of-heap","metadata":{"permalink":"/blog/applications-of-heap","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/applications-of-heap.mdx","source":"@site/blog/applications-of-heap.mdx","title":"applications-of-heap","description":"---","date":"2024-01-09T15:47:15.000Z","formattedDate":"January 9, 2024","tags":[],"readingTime":0.895,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"suspense/react-suspense","permalink":"/blog/suspense/react-suspense"},"nextItem":{"title":"js","permalink":"/blog/js"}},"content":"import Tabs from \\"@theme/Tabs\\";\\nimport TabItem from \\"@theme/TabItem\\";\\n\\n---\\nslug: heap-application\\ntitle: Applications of Heap\\ntags: [data structure, heap]\\n---\\n\\nleetcode natively supports JS PQs, including a Min one.\\n\\n[github datastructures - priority queue](https://github.com/datastructures-js/priority-queue)\\n\\n[github leetcode - environment for the programming languages](https://support.leetcode.com/hc/en-us/articles/360011833974-What-are-the-environments-for-the-programming-languages-)\\n\\n\\n\\n<Tabs>\\n    <TabItem value=\\"The Top K Problem\\" label=\\"The Top K Problem\\" default>\\n        Use the Heap data structure to obtain Top K\u2019s largest or smallest elements.\\n\\n        Solution of the Top K largest elements:\\n        1. Construct a Max Heap.\\n        2. Add all elements into the Max Heap.\\n        3. Traversing and deleting the top element, and store the value into the result arry T.\\n        4. Repeat step 3 until we have removed the K largest elements.\\n\\n        Solution of the Top K smalllest elements\\n        1. Construct a Min Heap\\n        2. Add all elements into the Min Heap\\n        3. Traversing and deleing the top element, and store the value into the result array T.\\n        4. Repeat step 3 until we have removed the K smallest elements.\\n\\n        Time Complexity: O(KlogN + N)\\n        Space complexity: O(N)\\n    </TabItem>\\n\\n    <TabItem value=\\"--\\" label=\\"--\\" default>\\n        hello orange\\n    </TabItem>\\n\\n</Tabs>"},{"id":"/js","metadata":{"permalink":"/blog/js","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/js.md","source":"@site/blog/js.md","title":"js","description":"JS reference","date":"2024-01-09T15:47:15.000Z","formattedDate":"January 9, 2024","tags":[],"readingTime":0.255,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"applications-of-heap","permalink":"/blog/applications-of-heap"},"nextItem":{"title":"usePaginationFragment","permalink":"/blog/use-pagination-fragment"}},"content":"JS reference\\n\\n## Map.prototype.entries() VS Object.entries()\\n\\nObject.entries()\\nThe Object.entries() static method returns an array of a given object\'s own enumerable string-keyed property key-value pairs.\\n\\nThe entries() method of Map instances returns a new map iterator object that contains the [key, value] pairs for each element in this map in insertion order."},{"id":"use-pagination-fragment","metadata":{"permalink":"/blog/use-pagination-fragment","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/use-pagination-fragment.md","source":"@site/blog/use-pagination-fragment.md","title":"usePaginationFragment","description":"usePaginationFragment is a hook provided by Relay, a JavaScriptframework for building data-driven React applications with GraphQL.","date":"2024-01-09T15:47:15.000Z","formattedDate":"January 9, 2024","tags":[{"label":"Relay","permalink":"/blog/tags/relay"},{"label":"GraphQL","permalink":"/blog/tags/graph-ql"}],"readingTime":1.58,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"usePaginationFragment","slug":"use-pagination-fragment","tags":["Relay","GraphQL"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"js","permalink":"/blog/js"},"nextItem":{"title":"Implemenation of a Heap","permalink":"/blog/heap"}},"content":"usePaginationFragment is a hook provided by Relay, a JavaScriptframework for building data-driven React applications with GraphQL.\\n\\nThis hook is specially designed for working with paginated data. \\n\\n## What is a Pagination Fragment\\nA pagination fragment in Relay is a way to define a part of a GraphQL query that deals with a list of items taht can be paginated.\\nThis means it you can fetch a subset of items initially and then load more items as needs(e.g., when a  user scroll to the bottom of a list)\\n\\n\\n## Arguments\\n- fragment\\n- fragmentReference(fragmentKey)\\n\\n## Return Value\\n- data\\n- isLoadingNext\\n- isLoadingPrevious\\n- hasNext\\n- hasPrevious\\n- loadNext\\n- loadPrevious\\n- refetch\\n\\n## To make \\"usePaginationFragment\\" work\\n1. Fragment Definition: Start by defining a GraphQL fragment on the type that represents your list of items. This fragment includes fields you want to fetch for each item and a connection for pagination.\\n   \\n2. Hook Usage: Use the \\"usePaginationFragment\\" hook. This hook takes 2 arguments:\\n   - The FraphQL fragment you define. (fragment)\\n   - The data from the parent query or fragment that contains the connection(fragmentKey).\\n         The fragment reference(fragmentKey) is an opaque Relay object that Relay uses to read the data for the fragment from the store; more specifically, it contains information about which particular object instance the data should be read from.\\n\\n         The type of the fragment reference can be imported from the generated Flow types, from the file `fragment_name`.graphql.js , and can be used to declare the type of your Props. The name of the fragment reference type will be: `fragment_name`$key.\\n\\n3. Fetching More Data: The hook provides methods to fetch more items (e.g., loadNext, loadNext). When you call these methods, Relay will automatically make a GraphQL query to fetch the next or previous set of items.\\n\\n4. Handling Data and State: The hook also provides the current data and state of the pagination(e.g., hasNext, isLoadingPrevious, isLoadingNext)"},{"id":"heap","metadata":{"permalink":"/blog/heap","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/heap/heap.md","source":"@site/blog/heap/heap.md","title":"Implemenation of a Heap","description":"This is my first post on Docusaurus.","date":"2024-01-09T15:47:15.000Z","formattedDate":"January 9, 2024","tags":[{"label":"data structure","permalink":"/blog/tags/data-structure"}],"readingTime":3.51,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Implemenation of a Heap","description":"This is my first post on Docusaurus.","slug":"heap","tags":["data structure"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"usePaginationFragment","permalink":"/blog/use-pagination-fragment"},"nextItem":{"title":"applications-of-heap","permalink":"/blog/2024/01/08/applications-of-heap"}},"content":"\x3c!-- truncate --\x3e\\n\\n### Min Heap\\n1. Complete binary tree\\n2. Each node in the Heap has a value no larger than its child nodes. Therefore, the top element (root node) has the smallest value in the Heap.\\n<br/>\\ntransform a binary tree into an array\\n\\n![Tree To Array](./TreeToArray.png)\\n\\n```js\\n// Implementing \\"Min Heap\\"\\npublic class MinHeap {\\n    // Create a complete binary tree using an array\\n    // Then use the binary tree to construct a Heap\\n    int[] minHeap;\\n    // the number of elements is needed when instantiating an array\\n    // heapSize records the size of the array\\n    int heapSize;\\n    // realSize records the number of elements in the Heap\\n    int realSize = 0;\\n\\n    public MinHeap(int heapSize) {\\n        this.heapSize = heapSize;\\n        minHeap = new int[heapSize + 1];\\n        // To better track the indices of the binary tree, \\n        // we will not use the 0-th element in the array\\n        // You can fill it with any value\\n        minHeap[0] = 0;\\n    }\\n\\n    // Function to add an element\\n    public void add(int element) {\\n        realSize++;\\n        // If the number of elements in the Heap exceeds the preset heapSize\\n        // print \\"Added too many elements\\" and return\\n        if (realSize > heapSize) {\\n            System.out.println(\\"Added too many elements!\\");\\n            realSize--;\\n            return;\\n        }\\n        // Add the element into the array\\n        minHeap[realSize] = element;\\n        // Index of the newly added element\\n        int index = realSize;\\n        // Parent node of the newly added element\\n        // Note if we use an array to represent the complete binary tree\\n        // and store the root node at index 1\\n        // index of the parent node of any node is [index of the node / 2]\\n        // index of the left child node is [index of the node * 2]\\n        // index of the right child node is [index of the node * 2 + 1]\\n        int parent = index / 2;\\n        // If the newly added element is smaller than its parent node,\\n        // its value will be exchanged with that of the parent node \\n        while ( minHeap[index] < minHeap[parent] && index > 1 ) {\\n            int temp = minHeap[index];\\n            minHeap[index] = minHeap[parent];\\n            minHeap[parent] = temp;\\n            index = parent;\\n            parent = index / 2;\\n        }\\n    }\\n\\n    // Get the top element of the Heap\\n    public int peek() {\\n        return minHeap[1];\\n    }\\n\\n    // Delete the top element of the Heap\\n    public int pop() {\\n        // If the number of elements in the current Heap is 0,\\n        // print \\"Don\'t have any elements\\" and return a default value\\n        if (realSize < 1) {\\n            System.out.println(\\"Don\'t have any element!\\");\\n            return Integer.MAX_VALUE;\\n        } else {\\n            // When there are still elements in the Heap\\n            // realSize >= 1\\n            int removeElement = minHeap[1];\\n            // Put the last element in the Heap to the top of Heap\\n            minHeap[1] = minHeap[realSize];\\n            realSize--;\\n            int index = 1;\\n            // When the deleted element is not a leaf node\\n            while (index <= realSize / 2) {\\n                // the left child of the deleted element\\n                int left = index * 2;\\n                // the right child of the deleted element\\n                int right = (index * 2) + 1;\\n                // If the deleted element is larger than the left or right child\\n                // its value needs to be exchanged with the smaller value\\n                // of the left and right child\\n                if (minHeap[index] > minHeap[left] || minHeap[index] > minHeap[right]) {\\n                    if (minHeap[left] < minHeap[right]) {\\n                        int temp = minHeap[left];\\n                        minHeap[left] = minHeap[index];\\n                        minHeap[index] = temp;\\n                        index = left;\\n                    } else {\\n                        // maxHeap[left] >= maxHeap[right]\\n                        int temp = minHeap[right];\\n                        minHeap[right] = minHeap[index];\\n                        minHeap[index] = temp;\\n                        index = right;\\n                    }\\n                } else {\\n                    break;\\n                }\\n            }\\n            return removeElement;\\n        } \\n    }\\n\\n    // return the number of elements in the Heap\\n    public int size() {\\n        return realSize;\\n    }\\n\\n    public String toString() {\\n        if (realSize == 0) {\\n            return \\"No element!\\";\\n        } else {\\n            StringBuilder sb = new StringBuilder();\\n            sb.append(\'[\');\\n            for (int i = 1; i <= realSize; i++) {\\n                sb.append(minHeap[i]);\\n                sb.append(\',\');\\n            }\\n            sb.deleteCharAt(sb.length() - 1);\\n            sb.append(\']\');\\n            return sb.toString();\\n        }\\n    }\\n\\n    public static void main(String[] args) {\\n        // Test case\\n        MinHeap minHeap = new MinHeap(3);\\n        minHeap.add(3);\\n        minHeap.add(1);\\n        minHeap.add(2);\\n        // [1,3,2]\\n        System.out.println(minHeap.toString());\\n        // 1\\n        System.out.println(minHeap.peek());\\n        // 1\\n        System.out.println(minHeap.pop());\\n        // [2, 3]\\n        System.out.println(minHeap.toString());\\n        minHeap.add(4);\\n        // Add too many elements\\n        minHeap.add(5);\\n        // [2,3,4]\\n        System.out.println(minHeap.toString());\\n    }\\n}\\n\\n```"},{"id":"/2024/01/08/applications-of-heap","metadata":{"permalink":"/blog/2024/01/08/applications-of-heap","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-01-08-applications-of-heap.mdx","source":"@site/blog/2024-01-08-applications-of-heap.mdx","title":"applications-of-heap","description":"---","date":"2024-01-08T00:00:00.000Z","formattedDate":"January 8, 2024","tags":[],"readingTime":0.895,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Implemenation of a Heap","permalink":"/blog/heap"},"nextItem":{"title":"Fragments","permalink":"/blog/relay-fragment"}},"content":"import Tabs from \\"@theme/Tabs\\";\\nimport TabItem from \\"@theme/TabItem\\";\\n\\n---\\nslug: heap-application\\ntitle: Applications of Heap\\ntags: [data structure, heap]\\n---\\n\\nleetcode natively supports JS PQs, including a Min one.\\n\\n[github datastructures - priority queue](https://github.com/datastructures-js/priority-queue)\\n\\n[github leetcode - environment for the programming languages](https://support.leetcode.com/hc/en-us/articles/360011833974-What-are-the-environments-for-the-programming-languages-)\\n\\n\\n\\n<Tabs>\\n    <TabItem value=\\"The Top K Problem\\" label=\\"The Top K Problem\\" default>\\n        Use the Heap data structure to obtain Top K\u2019s largest or smallest elements.\\n\\n        Solution of the Top K largest elements:\\n        1. Construct a Max Heap.\\n        2. Add all elements into the Max Heap.\\n        3. Traversing and deleting the top element, and store the value into the result arry T.\\n        4. Repeat step 3 until we have removed the K largest elements.\\n\\n        Solution of the Top K smalllest elements\\n        1. Construct a Min Heap\\n        2. Add all elements into the Min Heap\\n        3. Traversing and deleing the top element, and store the value into the result array T.\\n        4. Repeat step 3 until we have removed the K smallest elements.\\n\\n        Time Complexity: O(KlogN + N)\\n        Space complexity: O(N)\\n    </TabItem>\\n\\n    <TabItem value=\\"--\\" label=\\"--\\" default>\\n        hello orange\\n    </TabItem>\\n\\n</Tabs>"},{"id":"relay-fragment","metadata":{"permalink":"/blog/relay-fragment","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-1-05-relay-fragment.md","source":"@site/blog/2024-1-05-relay-fragment.md","title":"Fragments","description":"In Relay, GraphQL Fragments serve as the main building block for declaring data dependencies for React Components. Fragments in GraphQL are reusable units that define a set of fields to be queried from a GraphQL type. These fragments allow us to specify the data requirements for a particular part of our application, making queries more modular and maintainable.","date":"2024-01-05T00:00:00.000Z","formattedDate":"January 5, 2024","tags":[{"label":"React","permalink":"/blog/tags/react"},{"label":"Relay","permalink":"/blog/tags/relay"},{"label":"GraphQl","permalink":"/blog/tags/graph-ql"}],"readingTime":0.655,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"relay-fragment","title":"Fragments","tags":["React","Relay","GraphQl"]},"unlisted":false,"prevItem":{"title":"applications-of-heap","permalink":"/blog/2024/01/08/applications-of-heap"},"nextItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"In Relay, GraphQL Fragments serve as the main building block for declaring data dependencies for React Components. Fragments in GraphQL are reusable units that define a set of fields to be queried from a GraphQL type. These fragments allow us to specify the data requirements for a particular part of our application, making queries more modular and maintainable.\\n\\n\x3c!-- truncate --\x3e\\n\\n## key Concepts\\n\\n### GraphQL Fragments\\n- A GraphQL Fragment is a named set of fields on a GraphQL type. It is  a way to define a subset of the fields that we want to query on a particular GraphQL type.\\n- Fragments allow us to modularize queries and reuse them across multiple components. For example, when different components share similar data requirements.\\n\\n### Data Dependencies in Relay Components\\n\\nToDo"},{"id":"mdx-blog-post","metadata":{"permalink":"/blog/mdx-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","formattedDate":"August 1, 2021","tags":[{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"unlisted":false,"prevItem":{"title":"Fragments","permalink":"/blog/relay-fragment"},"nextItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n\\n:::"},{"id":"long-blog-post","metadata":{"permalink":"/blog/long-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","formattedDate":"May 29, 2019","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Endilie Yacop Sucipto","title":"Maintainer of Docusaurus","url":"https://github.com/endiliey","imageURL":"https://github.com/endiliey.png","key":"endi"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"endi","tags":["hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"},"nextItem":{"title":"First Blog Post","permalink":"/blog/first-blog-post"}},"content":"This is the summary of a very long blog post,\\n\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\n\\n\x3c!--truncate--\x3e\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"id":"first-blog-post","metadata":{"permalink":"/blog/first-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-28-first-blog-post.md","source":"@site/blog/2019-05-28-first-blog-post.md","title":"First Blog Post","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","date":"2019-05-28T00:00:00.000Z","formattedDate":"May 28, 2019","tags":[{"label":"hola","permalink":"/blog/tags/hola"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.395,"hasTruncateMarker":false,"authors":[{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"}],"frontMatter":{"slug":"first-blog-post","title":"First Blog Post","authors":{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"},"tags":["hola","docusaurus"]},"unlisted":false,"prevItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\n<mark>Marked text 1</mark>\\n\x3c!-- \\n<span style=\\"background-color: #FFFF00\\">Marked text 2</span> Main content highlight\\n\\n<span style=\\"background-color: #E6F8FF\\">Marked text 3</span> Main content highlight\\n\\n<span style=\\"background-color: #F6F7F9\\">Marked text 4</span> Main content highlight\\n\\n<span style=\\"background-color: #FDF2EA\\">Marked text 5</span> Code\\n\\n<span style=\\"color: #2C6F63\\">Marked text 6</span> Conten in Tip or Note\\n\\n<span style=\\"color: #277B9F\\">Marked text 7</span> Conten in Tip or Note   --\x3e"}]}')}}]);