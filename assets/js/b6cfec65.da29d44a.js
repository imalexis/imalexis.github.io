"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5923],{7310:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>d});var t=o(5893),s=o(1151);const c={sidebar_position:1},r="useCallback Hook",i={id:"react-notes/react-hooks",title:"useCallback Hook",description:"Usage",source:"@site/docs/react-notes/react-hooks.md",sourceDirName:"react-notes",slug:"/react-notes/react-hooks",permalink:"/docs/react-notes/react-hooks",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/react-notes/react-hooks.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Translate your site",permalink:"/docs/tutorial-extras/translate-your-site"}},a={},d=[{value:"Usage",id:"usage",level:2},{value:"1. Skipping re-rendering of components",id:"1-skipping-re-rendering-of-components",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"usecallback-hook",children:"useCallback Hook"}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.h3,{id:"1-skipping-re-rendering-of-components",children:"1. Skipping re-rendering of components"}),"\n",(0,t.jsx)(n.p,{children:"Explain it with more context."}),"\n",(0,t.jsx)(n.p,{children:"In React, components can re-render. Re-rendering means the component's UI is updated based on changes on state or props. When a component re-renders, its function, including event handlers and other callbacks, are recreated."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// ParentComponent.jsx\nimport React, { useState, useCallback } from 'react';\nimport ChildComponent from './ChildComponent';\n\nfunction ParentComponent() {\n  const [count, setCount] = useState(0);\n\n  const onClickHandler = useCallback(() => {\n    console.log('Button Clicked!', count);\n  }, [count]);\n\n  return (\n    <div>\n      <ChildComponent onClick={onClickHandler} />\n      <button onClick={() => setCount(count + 1)}>Increment Count</button>\n    </div>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"In the example:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"onClickHandler"})," function in the ",(0,t.jsx)(n.code,{children:"ParentComponent"})," is created using ",(0,t.jsx)(n.code,{children:"useCallback"}),". It takes into consideration the ",(0,t.jsx)(n.code,{children:"count"})," state as a dependency."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"ChildComponent"})," receives this memorized function (",(0,t.jsx)(n.code,{children:"onClickHandler"}),") as a prop."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'Now we can understand the behavior "between re-renders":'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["if ",(0,t.jsx)(n.code,{children:"onClickHandler"})," was not memorized with ",(0,t.jsx)(n.code,{children:"useCallback"}),", every time ",(0,t.jsx)(n.code,{children:"ParentComponent"})," re-renders, a new function would be created, and the ",(0,t.jsx)(n.code,{children:"onClick"})," prop passed to ",(0,t.jsx)(n.code,{children:"ChildComponent"})," would change."]}),"\n",(0,t.jsxs)(n.li,{children:["By using ",(0,t.jsx)(n.code,{children:"useCallback"})," with ",(0,t.jsx)(n.code,{children:"[count]"})," as dependencies, React ensures that the ",(0,t.jsx)(n.code,{children:"onClickHandler"})," function only changes when ",(0,t.jsx)(n.code,{children:"count"})," changes. This is beneficial because, even if ",(0,t.jsx)(n.code,{children:"ParentComponent"})," re-renders for other reasons(like updating unrelated state), the ",(0,t.jsx)(n.code,{children:"onClick"})," prop passed to ",(0,t.jsx)(n.code,{children:"ChildComponent"})," won't change unless ",(0,t.jsx)(n.code,{children:"count"})," changes."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This stability in function references can be important in scenarios where you want to optimize performance, especially in the context of avoiding unnecessary re-renders in child components."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>i,a:()=>r});var t=o(7294);const s={},c=t.createContext(s);function r(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);